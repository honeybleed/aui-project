!function(e,o){"object"==typeof exports&&"undefined"!=typeof module?o(exports,require("@angular/core")):"function"==typeof define&&define.amd?define(["exports","@angular/core"],o):o(e.auiCommon={},e.ng.core)}(this,function(e,o){"use strict";var n=function(){return function(){}}(),c={family:"common-icon",map:[{name:"window-close",code:""},{name:"eye",code:""},{name:"check",code:""},{name:"alert-circle-outline",code:""},{name:"arrow-down",code:""}]},t=function(){return function(){}}(),r=function(){function e(e){if(this._icon_map_cache=new Map,this._icon_map_cache.set(c.family,c),e)for(var o=0,n=e;o<n.length;o++){var t=n[o];this._icon_map_cache.has(t.family)?(console.warn("IconMap family named ["+t.family+"] is overwrote!!"),this._icon_map_cache.set(t.family,t)):this._icon_map_cache.set(t.family,t)}else console.log("no config of IconManageService")}return e.prototype.getIconFamilies=function(){var e=[];for(var o in this._icon_map_cache)o&&e.push(o);return e},e.prototype.getIconMaps=function(){var e=new Map;return this._icon_map_cache.forEach(function(o,n){e.set(n,o)}),e},e.prototype.getIcon=function(e,o){var n=this._icon_map_cache.get(e);if(!n)return null;var c=n.map.find(function(e){return e.name===o});return c?{name:c.name,code:c.code}:null},e}();r.decorators=[{type:o.Injectable}],r.ctorParameters=function(){return[{type:t,decorators:[{type:o.Optional}]}]};var a=function(){function e(e){e&&console.error("IconModule is Loaded already!")}return e.forRoot=function(o){return{ngModule:e,providers:[r,{provide:t,useValue:o}]}},e}();a.decorators=[{type:o.NgModule,args:[{}]}],a.ctorParameters=function(){return[{type:a,decorators:[{type:o.Optional},{type:o.SkipSelf}]}]},e.AuiCommonModule=a,e.IconManageService=r,e.IconMap=n,e.commonIcons=c,e.IconConfig=t,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=common.umd.min.js.map
